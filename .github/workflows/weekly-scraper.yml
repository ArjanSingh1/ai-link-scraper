name: Weekly AI Link Scraper

on:
  schedule:
    # Runs every Monday at 9 AM UTC (adjust timezone as needed)
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allows manual runs from GitHub UI

jobs:
  scrape-links:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Test connection
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Testing connections before starting weekly scrape..."
        python -c "
        import sys
        sys.path.append('.')
        from src.slack_client import SlackClient
        try:
            client = SlackClient()
            if client.test_connection():
                print('‚úÖ Slack connection successful!')
            else:
                print('‚ùå Slack connection failed!')
                sys.exit(1)
        except Exception as e:
            print(f'‚ùå Connection test error: {e}')
            sys.exit(1)
        "
    
    - name: Run weekly scraper
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Starting weekly AI link scraper..."
        
        # Scrape links from the past week and send to Slack
        if python main.py --start-date $(date -d '7 days ago' +%Y-%m-%d) --send-to-slack --verbose; then
            echo "‚úÖ Weekly scraping completed successfully!"
        else
            echo "‚ùå Weekly scraping failed, but continuing..."
            exit_code=$?
        fi
        
        # Optional: Share complete summary collection
        echo "Sharing complete summary collection..."
        if python main.py --share-all-summaries; then
            echo "‚úÖ Summary collection shared successfully!"
        else
            echo "‚ùå Failed to share summary collection"
        fi
        
        echo "All tasks completed!"
    
    - name: Send completion notification
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      run: |
        echo "Sending completion notification..."
        python -c "
        import sys
        sys.path.append('.')
        from src.slack_client import SlackClient
        from datetime import datetime
        try:
            client = SlackClient()
            message = f'ü§ñ Weekly AI Link Scraper completed at {datetime.now().strftime(\"%Y-%m-%d %H:%M UTC\")}. Check the thread for new summaries!'
            client.send_message(message)
            print('‚úÖ Completion notification sent!')
        except Exception as e:
            print(f'‚ùå Failed to send notification: {e}')
        " || echo "Notification failed, but workflow completed"

    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: scraper-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
    
    - name: Upload summaries as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: summaries-${{ github.run_number }}
        path: summaries/
        retention-days: 90
